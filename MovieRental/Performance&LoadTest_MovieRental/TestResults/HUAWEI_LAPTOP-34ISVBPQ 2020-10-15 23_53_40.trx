<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="7329e01c-4bed-44ea-94bf-41b20f9b26ac" name="HUAWEI@LAPTOP-34ISVBPQ 2020-10-15 23:53:40" runUser="LAPTOP-34ISVBPQ\HUAWEI" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="8dacf3f0-24b5-4304-b928-31ffb00f4997">
    <Description>These are default test settings for a local test run.</Description>
    <Execution hostProcessPlatform="MSIL">
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="HUAWEI_LAPTOP-34ISVBPQ 2020-10-15 23_53_40" />
    <Properties>
      <Property name="TestSettingsUIType" value="UnitTest" />
    </Properties>
  </TestSettings>
  <Times creation="2020-10-15T23:53:40.1420043+13:00" queuing="2020-10-15T23:53:41.2790894+13:00" start="2020-10-15T23:53:41.5171130+13:00" finish="2020-10-15T23:53:57.6231599+13:00" />
  <ResultSummary outcome="Completed">
    <Counters total="1" executed="1" passed="1" error="0" failed="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="Customers" storage="c:\users\huawei\desktop\movierental-final\movierental\performance&amp;loadtest_movierental\movierentalperformancetest\customers.webtest" id="64e8ced8-d96d-49f2-8800-803f16fb2191" persistedWebTest="">
      <Execution id="44f675fd-ee3e-4ee5-9d3a-d53ed315d770" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="64e8ced8-d96d-49f2-8800-803f16fb2191" executionId="44f675fd-ee3e-4ee5-9d3a-d53ed315d770" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="44f675fd-ee3e-4ee5-9d3a-d53ed315d770" testId="64e8ced8-d96d-49f2-8800-803f16fb2191" testName="Customers" computerName="LAPTOP-34ISVBPQ" duration="00:00:05.0672801" startTime="2020-10-15T23:53:41.7101227+13:00" endTime="2020-10-15T23:53:57.5581562+13:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="44f675fd-ee3e-4ee5-9d3a-d53ed315d770">
      <ResultFiles>
        <ResultFile path="Customers.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="8dacf3f0-24b5-4304-b928-31ffb00f4997">
        <Description>These are default test settings for a local test run.</Description>
        <Execution hostProcessPlatform="MSIL">
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="HUAWEI_LAPTOP-34ISVBPQ 2020-10-15 23_53_40" />
        <Properties>
          <Property name="TestSettingsUIType" value="UnitTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>HUAWEI_LAPTOP-34ISVBPQ 2020-10-15 23_53_40\In\44f675fd-ee3e-4ee5-9d3a-d53ed315d770\Customers.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>